plugins {
    id 'java'
    id "org.jsonschema2pojo" version "1.2.2"
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // Junit
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // RabbitMQ
    implementation 'com.rabbitmq:amqp-client:5.22.0'

    // For Jsonb
    implementation 'javax.json.bind:javax.json.bind-api:1.0'
    implementation 'org.eclipse:yasson:1.0'
    implementation 'org.glassfish:javax.json:1.1'
}

jsonSchema2Pojo {
    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source = files("${project.projectDir}/src/main/resources/jsonschemas")

    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
    targetDirectory = file("${project.buildDir}/generated-sources/js2p")

    annotationStyle = 'jsonb1'
    useTitleAsClassname = false
    sourceType = 'jsonschema'

    removeOldOutput = true

    useLongIntegers = true

    includeAdditionalProperties = false

    includeConstructors = true
}

test {
    useJUnitPlatform()
}

task recvJar(type: Jar) {
    archiveBaseName.set('basic/recv')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.example.basic.Recv'
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task sendJar(type: Jar) {
    archiveBaseName.set('basic/send')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.example.basic.Send'
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task recvExchangeJar(type: Jar) {
    archiveBaseName.set('exchange/recv')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.example.exchange.RecvExchange'
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task sendExchangeJar(type: Jar) {
    archiveBaseName.set('exchange/send')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.example.exchange.SendExchange'
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task recvPojoJar(type: Jar) {
    archiveBaseName.set('pojo/recv')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.example.pojo.RecvPOJO'
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task sendPojoJar(type: Jar) {
    archiveBaseName.set('pojo/send')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.example.pojo.SendPOJO'
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.build.dependsOn recvJar
tasks.build.dependsOn sendJar
tasks.build.dependsOn recvExchangeJar
tasks.build.dependsOn sendExchangeJar
tasks.build.dependsOn recvPojoJar
tasks.build.dependsOn sendPojoJar